09AB = work  #check money 
09A6 = work #print money after check money
09A9 = need test 


============================================================================================================================
send //
'09AB' => ['banking_check', 'v a4', [qw(len charID)]],

sub banking_check {
	my ($self) = @_;
	my $msg = pack('v a4', 0x09AB, $accountID);
	$self->sendToServer($msg);	
	debug "Checking Money in Bank\n", "sendPacket";
}


#need check 
'09A9' => ['banking_withdraw', 'a4 V', [qw(charID zeny)]],
sub banking_withdraw {
    my ($self, $zeny_amount) = @_;
    $data = $self->{recvPacketParser}->reconstruct({
                switch => 'banking_withdraw',
                charID => $accounID,
                zeny => $zeny_amount,
            });
    $self->sendToServer($msg);
    debug "Withdraw $zeny_amount from Bank\n", "sendPacket";
}


============================================================================================================================
recv//
09A6
'09A6' => ['banking_status', 'V2 C2' ,[qw(zeny reason)]],

sub banking_status {
    my ($self, $args) = @_;
	
	message TF ("--------------- [Bank Storage] ---------------\n"),"info";
	message TF ("In Bank: ".$args->{zeny}." Zeny\n");
	message TF ("In Hard: ".$char->{zeny}." Zeny\n");
	message TF ("-----------------------------------------------\n"),"info";
}



============================================================================================================================
//commands.pm
sub cmdBank {
    my (undef, $args_string) = @_;
    my (@args) = parseArgs($args_string, 3);
	if (!$net || $net->getState() != Network::IN_GAME) {
		error TF("You must be logged in the game to use this command '%s'\n", shift);
		return;
	}
	# Check bank 
	#bank check
	if ($args[0] eq "check") {
		message T("Check Bank UI.\n"), "info";
		undef $refineUI;
		$messageSender->banking_check();
		return;

	# Bank withdraw [Zeny]
	# Do refine
	} elsif ($args[0] eq "withdraw") {
		my $zeny = $args[1];
		# Check Zeny
		my $zeny = $char->zeny->get($zeny);

		$bank->{zeny} = $zeny;
		
		$messageSender->banking_withdraw();
		return;
	# Bank deposit [Zeny]
	} elsif ($args[0] eq "deposit") {
		my $zeny = $args[1];

		# Check Zeny
		my $zeny = $char->zeny->get($zeny);

		$bank->{zeny} = $zeny;
		
		$messageSender->banking_deposit();
		return;
	}
}	
