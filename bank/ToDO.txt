```
B = 1
W = 2
L = 4
Q = 8
```



09AB = work 
09A6 = work 
09A9 = work


============================================================================================================================
send //
'09AB' => ['banking_check', 'a4', [qw(charID)]],

sub sendbankcheck {
	my ($self, $accountID) = @_;
	$self->sendToServer($self->reconstruct({
		switch => 'banking_check',
		charID => $accountID,
	}));
}


'09A9' => ['banking_withdraw', 'a4 V', [qw(charID zenywithdraw)]],

sub sendbankwithdraw {
	my ($self, $accountID , $zenyamount) = @_;
	$self->sendToServer($self->reconstruct({
		switch => 'banking_withdraw',
		charID => $accountID,
		zenywithdraw => $zenyamount,
	}));
}

============================================================================================================================
recv//
09A6
'09A6' => ['banking_status', 'V2 C2' ,[qw(zeny reason)]],

sub banking_status {
	my ($self, $args) = @_;
	foreach (qw(zeny reason)) {
        $bank{$_} = $args->{$_};
   }		
    $bank{zeny} = $args->{zeny};
	$bank{reason} = $args->{zeny};
	my $msg = center(T("[Bank Storage]"), 60, '-') ."\n" .
		TF("In Bank : (%d) Zeny \n" .
			"On Hand : (%d) Zeny \n",				
		$bank{zeny}, $char->{zeny});
		$msg .= ('-'x60) . "\n";
		message $msg, "info";
		
}


============================================================================================================================
//commands.pm
sub cmdBank {
    my (undef, $args_string) = @_;
    my (@args) = parseArgs($args_string, 3);
	if (!$net || $net->getState() != Network::IN_GAME) {
		error TF("You must be logged in the game to use this command '%s'\n", shift);
		return;
	}
	
	if ($args[0] eq "check") {
		message TF("Check Zeny on bank (ID:%s).\n", $accountID,"info");
		$messageSender->sendbankcheck($accountID);
		return;
	} elsif ($args[0] eq "withdraw") {
		message TF("Withdraw Zeny to bank (Zeny:%s).\n", $args[1],"info");
		$messageSender->sendbankwithdraw($accountID, $args[1]);
		return;
	}
}
